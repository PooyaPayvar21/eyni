datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  clinics   Clinic[]
  isActive  Boolean  @default(true)
}

model Clinic {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  city        City     @relation(fields: [cityId], references: [id])
  cityId      Int
  doctors     Doctor[]
}

model Doctor {
  id          Int          @id @default(autoincrement())
  name        String
  specialty   String
  bio         String?
  slug        String       @unique
  clinic      Clinic       @relation(fields: [clinicId], references: [id])
  clinicId    Int
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  appointments Appointment[]
  slots        AvailabilitySlot[]
  secretary    Secretary?
}

model Secretary {
  id       Int       @id @default(autoincrement())
  name     String
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  doctor   Doctor    @relation(fields: [doctorId], references: [id])
  doctorId Int       @unique
}

model Appointment {
  id           Int      @id @default(autoincrement())
  datetime     DateTime
  patientName  String
  patientPhone String
  status       AppointmentStatus @default(PENDING)
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
  doctorId     Int
  createdAt    DateTime @default(now())
}

/// Secretary-defined time slots for booking
model AvailabilitySlot {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  datetime  DateTime // start time of the slot
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([doctorId, datetime])
}

// This User model is ONLY for authenticating Secretaries/Admins.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String    // Hashed
  role          Role      @default(SECRETARY) // SECRETARY, ADMIN, DOCTOR, SUPERADMIN
  accounts      Account[]
  sessions      Session[]
  secretary     Secretary?
  doctor        Doctor?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Role {
  SECRETARY
  ADMIN
  SUPERADMIN
  DOCTOR
}
